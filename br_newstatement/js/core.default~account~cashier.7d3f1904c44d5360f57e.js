(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~account~cashier"],{

/***/ "../../components/lib/button-link.css":
/*!*****************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/button-link.css ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvYnV0dG9uLWxpbmsuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9Vc2Vycy9TYXJhL3Byb2plY3QvZGVyaXYtYXBwL3BhY2thZ2VzL2NvbXBvbmVudHMvbGliL2J1dHRvbi1saW5rLmNzcz81YTYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/button-link.css\n");

/***/ }),

/***/ "../../components/lib/button-link.js":
/*!****************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/button-link.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-router-dom */ \"../node_modules/react-router-dom/esm/react-router-dom.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__17__){return function(_){var e={};function n(t){if(e[t])return e[t].exports;var r=e[t]={i:t,l:!1,exports:{}};return _[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=_,n.c=e,n.d=function(_,e,t){n.o(_,e)||Object.defineProperty(_,e,{enumerable:!0,get:t})},n.r=function(_){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(_,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(_,\"__esModule\",{value:!0})},n.t=function(_,e){if(1&e&&(_=n(_)),8&e)return _;if(4&e&&\"object\"==typeof _&&_&&_.__esModule)return _;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:_}),2&e&&\"string\"!=typeof _)for(var r in _)n.d(t,r,function(e){return _[e]}.bind(null,r));return t},n.n=function(_){var e=_&&_.__esModule?function(){return _.default}:function(){return _};return n.d(e,\"a\",e),e},n.o=function(_,e){return Object.prototype.hasOwnProperty.call(_,e)},n.p=\"\",n(n.s=53)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},17:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__17__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3Qtcm91dGVyLWRvbVwiPzUzYjkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xN19fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///17\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},35:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);\\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_router_dom__WEBPACK_IMPORTED_MODULE_3__);\\n\\n\\n\\n\\n\\nvar ButtonLink = function ButtonLink(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      to = _ref.to,\\n      onClick = _ref.onClick,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? \\'medium\\' : _ref$size;\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](react_router_dom__WEBPACK_IMPORTED_MODULE_3__[\"Link\"], {\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()(\\'dc-btn dc-btn--primary\\', className, \\'effect\\', \"dc-btn__\".concat(size)),\\n    to: to,\\n    onClick: onClick\\n  }, children);\\n};\\n\\nButtonLink.propTypes = {\\n  children: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  size: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  to: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string\\n};\\n/* harmony default export */ __webpack_exports__[\"a\"] = (ButtonLink);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uLWxpbmsvYnV0dG9uLWxpbmsuanN4PzA0MWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY29uc3QgQnV0dG9uTGluayA9ICh7IGNoaWxkcmVuLCBjbGFzc05hbWUsIHRvLCBvbkNsaWNrLCBzaXplID0gJ21lZGl1bScgfSkgPT4gKFxuICAgIDxMaW5rXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtYnRuIGRjLWJ0bi0tcHJpbWFyeScsIGNsYXNzTmFtZSwgJ2VmZmVjdCcsIGBkYy1idG5fXyR7c2l6ZX1gKX1cbiAgICAgICAgdG89e3RvfVxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgIDwvTGluaz5cbik7XG5cbkJ1dHRvbkxpbmsucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uTGluaztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFEQTtBQUNBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFRQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///35\\n')},53:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _button_link_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35);\\n/* harmony import */ var _button_link_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(54);\\n/* harmony import */ var _button_link_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_button_link_scss__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\n/* harmony default export */ __webpack_exports__[\"default\"] = (_button_link_jsx__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uLWxpbmsvaW5kZXguanM/OGU3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnV0dG9uTGluayBmcm9tICcuL2J1dHRvbi1saW5rLmpzeCc7XG5pbXBvcnQgJy4vYnV0dG9uLWxpbmsuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkxpbms7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///53\\n')},54:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uLWxpbmsvYnV0dG9uLWxpbmsuc2Nzcz8yMDllIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTQwNDg4NjE5NDNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///54\\n\")}}).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/button-link.js\n");

/***/ }),

/***/ "../../components/lib/dropdown.css":
/*!**************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/dropdown.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9Vc2Vycy9TYXJhL3Byb2plY3QvZGVyaXYtYXBwL3BhY2thZ2VzL2NvbXBvbmVudHMvbGliL2Ryb3Bkb3duLmNzcz83NDYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.css\n");

/***/ }),

/***/ "../../components/lib/dropdown.js":
/*!*************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/dropdown.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(g,I){ true?module.exports=I(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! react-tiny-popover */ \"../../components/node_modules/react-tiny-popover/dist/Popover.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__11__){return function(g){var I={};function e(C){if(I[C])return I[C].exports;var A=I[C]={i:C,l:!1,exports:{}};return g[C].call(A.exports,A,A.exports,e),A.l=!0,A.exports}return e.m=g,e.c=I,e.d=function(g,I,C){e.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:C})},e.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},e.t=function(g,I){if(1&I&&(g=e(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var C=Object.create(null);if(e.r(C),Object.defineProperty(C,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var A in g)e.d(C,A,function(I){return g[I]}.bind(null,A));return C},e.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return e.d(I,\"a\",I),I},e.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},e.p=\"\",e(e.s=112)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},11:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__11__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtdGlueS1wb3BvdmVyXCI/NzQxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzExX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///11\\n\")},112:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(8);\\n\\n// EXTERNAL MODULE: external \"@deriv/shared\"\\nvar shared_ = __webpack_require__(3);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\\n\\nvar getDisplayText = function getDisplayText(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return (arr_list.find(function (item) {\\n      return item.value === value;\\n    }) || {}).text;\\n  };\\n\\n  var text = \\'\\';\\n\\n  if (Array.isArray(list)) {\\n    text = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      text = findInArray(list[key]);\\n      return text;\\n    });\\n  }\\n\\n  return text;\\n};\\nvar findNextFocusableNode = function findNextFocusableNode(active_node) {\\n  if (!active_node) return null;\\n  if (active_node.attributes.tabIndex) return active_node;\\n  return findNextFocusableNode(active_node.nextSibling);\\n};\\nvar findPreviousFocusableNode = function findPreviousFocusableNode(active_node) {\\n  if (!active_node) return null;\\n  if (active_node.attributes.tabIndex) return active_node;\\n  return findPreviousFocusableNode(active_node.previousSibling);\\n};\\nvar dropdown_listPropType = function listPropType() {\\n  return external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    disabled: external_prop_types_default.a.bool,\\n    has_tooltip: external_prop_types_default.a.bool,\\n    text: external_prop_types_default.a.string,\\n    tooltip: external_prop_types_default.a.string,\\n    value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n  })), external_prop_types_default.a.object]);\\n};\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 1 modules\\nvar popover = __webpack_require__(16);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/items.jsx\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n\\n\\n\\n\\n\\nvar items_Items = function Items(_ref) {\\n  var items = _ref.items,\\n      props = _objectWithoutProperties(_ref, [\"items\"]);\\n\\n  return items.map(function (item, idx) {\\n    return /*#__PURE__*/external_react_[\"createElement\"](items_Item, _extends({\\n      key: idx,\\n      item: item\\n    }, props));\\n  });\\n};\\n\\nvar items_Item = function Item(_ref2) {\\n  var onKeyPressed = _ref2.onKeyPressed,\\n      value = _ref2.value,\\n      item = _ref2.item,\\n      handleSelect = _ref2.handleSelect,\\n      nodes = _ref2.nodes,\\n      has_symbol = _ref2.has_symbol,\\n      is_align_text_left = _ref2.is_align_text_left,\\n      className = _ref2.className;\\n  var item_ref = external_react_[\"useRef\"](null);\\n  var symbol_type_class_name = item.text && typeof item.text === \\'string\\' ? \"symbols--\".concat(item.text.toLowerCase()) : null;\\n  external_react_[\"useEffect\"](function () {\\n    var removeListeners = function removeListeners() {\\n      nodes[\"delete\"](item.value, item_ref.current);\\n      item_ref.current.removeEventListener(\\'keydown\\', onKeyPressed);\\n    };\\n\\n    if (item.disabled) removeListeners();else {\\n      var handleKeyPress = function handleKeyPress(e) {\\n        return onKeyPressed(e, item);\\n      };\\n\\n      item_ref.current.addEventListener(\\'keydown\\', handleKeyPress);\\n      nodes.set(item.value.toString(), item_ref.current);\\n    }\\n    return function () {\\n      return removeListeners();\\n    };\\n  }, [item]);\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: external_classnames_default()(\\'dc-list__item\\', {\\n      \\'dc-list__item--selected\\': value === item.value\\n    }, {\\n      \\'dc-list__item--disabled\\': item.disabled\\n    }),\\n    name: name,\\n    value: item.value,\\n    onClick: item.disabled ? null : handleSelect.bind(null, item),\\n    ref: item_ref,\\n    tabIndex: item.disabled ? null : 0,\\n    id: item.value\\n  }, !!has_symbol && item.has_tooltip && /*#__PURE__*/external_react_[\"createElement\"](popover[\"default\"], {\\n    alignment: \"left\",\\n    message: Object(shared_[\"getCurrencyDisplayCode\"])(item.text)\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-symbol\\', symbol_type_class_name)\\n  })), !!has_symbol && !item.has_tooltip && /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-text\\', symbol_type_class_name)\\n  }), !has_symbol && /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'dc-list__item-text\\', {\\n      \\'dc-list__item-text--left\\': is_align_text_left\\n    }, className)\\n  }, item.text));\\n};\\n\\nitems_Items.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  handleSelect: external_prop_types_default.a.func,\\n  has_symbol: external_prop_types_default.a.bool,\\n  onKeyPressed: external_prop_types_default.a.func,\\n  name: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_items = (items_Items);\\n// CONCATENATED MODULE: ./src/components/dropdown/native-select.jsx\\n\\n\\nvar NativeSelect = /*#__PURE__*/external_react_[\"forwardRef\"](function (_ref, ref) {\\n  var name = _ref.name,\\n      list = _ref.list,\\n      value = _ref.value,\\n      onChange = _ref.onChange;\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-native-select dc-native-select__wrapper\"\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"select\", {\\n    ref: ref,\\n    className: \"dc-native-select__select\",\\n    name: name,\\n    value: value,\\n    onChange: onChange\\n  }, Array.isArray(list) ? list.map(function (item, idx) {\\n    return /*#__PURE__*/external_react_[\"createElement\"](\"option\", {\\n      key: idx,\\n      value: item.value,\\n      disabled: item.disabled\\n    }, item.nativepicker_text);\\n  }) : Object.keys(list).map(function (key) {\\n    return /*#__PURE__*/external_react_[\"createElement\"](external_react_[\"Fragment\"], {\\n      key: key\\n    }, /*#__PURE__*/external_react_[\"createElement\"](\"optgroup\", {\\n      label: key\\n    }, list[key].map(function (item, idx) {\\n      return /*#__PURE__*/external_react_[\"createElement\"](\"option\", {\\n        key: idx,\\n        value: item.value,\\n        disabled: item.disabled\\n      }, item.nativepicker_text);\\n    })));\\n  })));\\n});\\nNativeSelect.displayName = \\'NativeSelect\\';\\nNativeSelect.propTypes = {\\n  list: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.array]),\\n  name: external_prop_types_default.a.string,\\n  nativepicker_text: external_prop_types_default.a.string,\\n  onChange: external_prop_types_default.a.func,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var native_select = (NativeSelect);\\n// CONCATENATED MODULE: ./src/components/dropdown/display-text.jsx\\n\\n\\n\\n\\n\\nvar display_text_DisplayText = function DisplayText(_ref) {\\n  var className = _ref.className,\\n      has_symbol = _ref.has_symbol,\\n      list = _ref.list,\\n      is_align_text_left = _ref.is_align_text_left,\\n      placeholder = _ref.placeholder,\\n      name = _ref.name,\\n      value = _ref.value;\\n  var symbol_value_class = value && has_symbol ? \"symbols--\".concat(value.toLowerCase()) : null;\\n  return /*#__PURE__*/external_react_[\"createElement\"](external_react_[\"Fragment\"], null, has_symbol ? /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'symbols dc-dropdown__display-symbol\\', symbol_value_class, className),\\n    name: name,\\n    value: value\\n  }) : /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-text\\', className),\\n    name: name,\\n    value: value\\n  }, getDisplayText(list, value)), placeholder && /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-placeholder\\', {\\n      \\'dc-dropdown__display-placeholder--is-title\\': value,\\n      \\'dc-dropdown__display-placeholder--is-left-text\\': is_align_text_left\\n    })\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: \"dc-dropdown__display-placeholder-text\"\\n  }, placeholder)));\\n};\\n\\ndisplay_text_DisplayText.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_title: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n};\\n/* harmony default export */ var display_text = (display_text_DisplayText);\\n// EXTERNAL MODULE: ./src/hooks/use-onclickoutside.js\\nvar use_onclickoutside = __webpack_require__(24);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx + 1 modules\\nvar themed_scrollbars = __webpack_require__(14);\\n\\n// EXTERNAL MODULE: ./src/components/icon/index.js\\nvar icon = __webpack_require__(5);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.jsx\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_Dropdown = function Dropdown(_ref) {\\n  var className = _ref.className,\\n      classNameDisplay = _ref.classNameDisplay,\\n      classNameItems = _ref.classNameItems,\\n      classNameLabel = _ref.classNameLabel,\\n      disabled = _ref.disabled,\\n      error = _ref.error,\\n      handleBlur = _ref.handleBlur,\\n      has_symbol = _ref.has_symbol,\\n      hint = _ref.hint,\\n      label = _ref.label,\\n      list = _ref.list,\\n      name = _ref.name,\\n      no_border = _ref.no_border,\\n      is_alignment_top = _ref.is_alignment_top,\\n      is_alignment_left = _ref.is_alignment_left,\\n      is_align_text_left = _ref.is_align_text_left,\\n      is_large = _ref.is_large,\\n      is_nativepicker = _ref.is_nativepicker,\\n      is_nativepicker_visible = _ref.is_nativepicker_visible,\\n      placeholder = _ref.placeholder,\\n      onChange = _ref.onChange,\\n      value = _ref.value;\\n  var dropdown_ref = external_react_[\"useRef\"]();\\n  var list_ref = external_react_[\"useRef\"]();\\n  var native_select_ref = external_react_[\"useRef\"]();\\n  var wrapper_ref = external_react_[\"useRef\"]();\\n  var nodes = external_react_[\"useRef\"](new Map());\\n\\n  var _React$useState = external_react_[\"useState\"](!!is_nativepicker_visible),\\n      _React$useState2 = _slicedToArray(_React$useState, 2),\\n      is_list_visible = _React$useState2[0],\\n      setIsListVisible = _React$useState2[1];\\n\\n  var _React$useState3 = external_react_[\"useState\"]([0, 0]),\\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\\n      list_dimensions = _React$useState4[0],\\n      setListDimensions = _React$useState4[1];\\n\\n  var onClickOutSide = function onClickOutSide() {\\n    if (typeof handleBlur === \\'function\\') handleBlur({\\n      target: {\\n        name: name\\n      }\\n    });\\n    setIsListVisible(false);\\n  };\\n\\n  Object(use_onclickoutside[\"a\" /* useOnClickOutside */])(wrapper_ref, onClickOutSide, function () {\\n    return is_list_visible;\\n  });\\n  /**\\n   * Calculate the offset for the dropdown list based on its width\\n   *\\n   * @return {{transform: string}}\\n   */\\n\\n  var computed_offset_left = function computed_offset_left() {\\n    return {\\n      transform: \"translate3d(calc(-\".concat(list_dimensions[0], \"px - 12px), 0, 0px)\")\\n    };\\n  };\\n  /**\\n   * Calculate the offset for the dropdown list based on its height\\n   *\\n   * @return {{transform: string}}\\n   */\\n\\n\\n  var computed_offset_top = function computed_offset_top() {\\n    return {\\n      transform: \"translate3d(0, calc(-\".concat(list_dimensions[1], \"px - 16px), 0px)\")\\n    };\\n  };\\n\\n  var isSingleOption = function isSingleOption() {\\n    return Array.isArray(list) ? list.length < 2 : // object has less than two props or inner object has less than two props\\n    Object.keys(list).length && Object.keys(list).length < 2 && list[Object.keys(list)[0]].length < 2;\\n  };\\n\\n  var containerClassName = function containerClassName() {\\n    return external_classnames_default()(\\'dc-dropdown-container\\', className, {\\n      \\'dc-dropdown--has-placeholder\\': placeholder,\\n      \\'dc-dropdown--left\\': is_alignment_left,\\n      \\'dc-dropdown--show\\': is_list_visible,\\n      \\'dc-dropdown--disabled\\': isSingleOption() || disabled\\n    });\\n  };\\n\\n  var dropdownDisplayClassName = function dropdownDisplayClassName() {\\n    return external_classnames_default()(\\'dc-dropdown__display\\', classNameDisplay, {\\n      \\'dc-dropdown__display--clicked\\': is_list_visible,\\n      \\'dc-dropdown__display--has-symbol\\': has_symbol,\\n      \\'dc-dropdown__display--no-border\\': no_border,\\n      \\'dc-dropdown__display--is-left-text\\': is_align_text_left\\n    });\\n  };\\n\\n  var dropdownListClassName = function dropdownListClassName() {\\n    return external_classnames_default()(\\'dc-dropdown__list\\', {\\n      \\'dc-dropdown__list--left\\': is_alignment_left,\\n      \\'dc-dropdown__list--top\\': is_alignment_top\\n    });\\n  };\\n\\n  var listClassNames = function listClassNames() {\\n    return external_classnames_default()(\\'dc-list\\', {\\n      \\'dc-list--left\\': is_alignment_left,\\n      \\'dc-list--large\\': is_large\\n    });\\n  };\\n\\n  var transitionClassName = function transitionClassName() {\\n    return {\\n      enter: \"dc-dropdown__list--enter\".concat(is_alignment_left ? \\' dc-dropdown__list--left--enter\\' : \\'\\'),\\n      enterDone: \"dc-dropdown__list--enter-done\".concat(is_alignment_left ? \\' dc-dropdown__list--left--enter-done\\' : \\'\\'),\\n      exit: \"dc-dropdown__list--exit\".concat(is_alignment_left ? \\' dc-dropdown__list--left--exit\\' : \\'\\')\\n    };\\n  };\\n\\n  external_react_[\"useEffect\"](function () {\\n    if (is_nativepicker && !is_nativepicker_visible && is_list_visible) {\\n      setIsListVisible(false);\\n    }\\n  }, [is_nativepicker, is_nativepicker_visible]);\\n  external_react_[\"useEffect\"](function () {\\n    if (!is_list_visible) dropdown_ref.current.focus();\\n  }, [is_list_visible]);\\n\\n  var handleSelect = function handleSelect(item) {\\n    if (item.value !== value) onChange({\\n      target: {\\n        name: name,\\n        value: item.value\\n      }\\n    });\\n    handleVisibility();\\n  };\\n\\n  var handleVisibility = function handleVisibility() {\\n    if (is_nativepicker && !is_list_visible) {\\n      if (Object(shared_[\"mobileOSDetect\"])() === \\'iOS\\') {\\n        /* .focus() doesn\\'t trigger open <select /> in Android :(\\n         * so we use a CSS hack - refer to L237 in dropdown.scss\\n         * [TODO]: find alternative solution to trigger open <select /> with JS\\n         */\\n        native_select_ref.current.focus();\\n      }\\n\\n      setIsListVisible(true);\\n    } else {\\n      setIsListVisible(!is_list_visible);\\n    }\\n  };\\n\\n  var onKeyPressed = function onKeyPressed(event, item) {\\n    if (isSingleOption()) return; // Tab -> before preventDefault() to be able to go to the next tabIndex\\n\\n    if (event.keyCode === 9 && !is_list_visible) return;\\n    event.preventDefault();\\n    event.stopPropagation();\\n\\n    switch (event.keyCode) {\\n      case 27:\\n        // esc\\n        if (is_list_visible) handleVisibility();\\n        break;\\n\\n      case 9: // Tab\\n\\n      case 13: // Enter\\n\\n      case 32:\\n        // Space\\n        if (!item) return;\\n        handleSelect(item);\\n        break;\\n\\n      case 38: // Up Arrow\\n\\n      case 40:\\n        // Down Arrow\\n        if (is_list_visible) {\\n          focusNextListItem(event.keyCode);\\n        } else if (!is_alignment_left) {\\n          handleVisibility();\\n        }\\n\\n        break;\\n\\n      case 37: // Left arrow\\n\\n      case 39:\\n        // Right Arrow\\n        if (is_alignment_left) handleVisibility();\\n        break;\\n\\n      default:\\n    } // For char presses, we do a search for the item:\\n\\n\\n    if (event.key.length === 1 && list.length) {\\n      var _char = event.key.toLowerCase();\\n\\n      var item_starting_with_char = list.find(function (li) {\\n        return li.value && li.value[0].toLowerCase() === _char;\\n      });\\n      if (!item_starting_with_char) return;\\n      var item_ref = nodes.current.get(item_starting_with_char.value);\\n      if (item_ref) item_ref.focus();\\n    }\\n  };\\n\\n  var focusNextListItem = function focusNextListItem(direction) {\\n    var _document = document,\\n        activeElement = _document.activeElement;\\n\\n    if (activeElement.id === \\'dropdown-display\\') {\\n      Array.from(nodes.current.values())[0].focus();\\n    } else {\\n      var active_node = nodes.current.get(activeElement.id);\\n\\n      if (active_node) {\\n        if (direction === 40) {\\n          var next_node = findNextFocusableNode(active_node.nextSibling);\\n          if (next_node) next_node.focus();\\n        }\\n\\n        if (direction === 38) {\\n          var prev_node = findPreviousFocusableNode(active_node.previousSibling);\\n          if (prev_node) prev_node.focus();\\n        }\\n      }\\n    }\\n  }; // Upon render via css transition group, we use this as a callback to set the width/height of the dropdown list in the state\\n\\n\\n  var setListDimension = function setListDimension() {\\n    return setListDimensions([list_ref.current.offsetWidth, list_ref.current.offsetHeight]);\\n  };\\n\\n  var getDropDownAlignment = function getDropDownAlignment() {\\n    if (is_alignment_left) return computed_offset_left();else if (is_alignment_top) return computed_offset_top();\\n    return null;\\n  };\\n\\n  var DropdownItems = function DropdownItems(_ref2) {\\n    var items = _ref2.items;\\n    return /*#__PURE__*/external_react_[\"createElement\"](dropdown_items, {\\n      onKeyPressed: onKeyPressed,\\n      className: classNameItems,\\n      handleSelect: handleSelect,\\n      has_symbol: has_symbol,\\n      items: items,\\n      name: name,\\n      is_align_text_left: is_align_text_left,\\n      value: value,\\n      nodes: nodes.current\\n    });\\n  };\\n\\n  return /*#__PURE__*/external_react_[\"createElement\"](external_react_[\"Fragment\"], null, /*#__PURE__*/external_react_[\"createElement\"](\"input\", {\\n    className: \"dc-dropdown__inner\",\\n    autoComplete: \"off\",\\n    name: name,\\n    readOnly: \"readonly\",\\n    type: \"hidden\",\\n    value: value || 0\\n  }), /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    ref: wrapper_ref,\\n    className: containerClassName()\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-dropdown__container\"\\n  }, label && /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__label\\', {\\n      \\'dc-dropdown__label--clicked\\': is_list_visible\\n    })\\n  }, label), /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: dropdownDisplayClassName(),\\n    tabIndex: isSingleOption() ? \\'-1\\' : \\'0\\',\\n    onClick: handleVisibility,\\n    onKeyDown: onKeyPressed,\\n    id: \"dropdown-display\",\\n    ref: dropdown_ref\\n  }, /*#__PURE__*/external_react_[\"createElement\"](display_text, {\\n    has_symbol: has_symbol,\\n    name: name,\\n    is_title: is_list_visible,\\n    placeholder: placeholder,\\n    value: value || 0,\\n    list: list,\\n    is_align_text_left: is_align_text_left\\n  })), !isSingleOption() && /*#__PURE__*/external_react_[\"createElement\"](icon[\"default\"], {\\n    icon: is_alignment_left ? \\'IcChevronLeft\\' : \\'IcChevronDown\\',\\n    className: external_classnames_default()(\\'dc-dropdown__select-arrow\\', {\\n      \\'dc-dropdown__select-arrow--left\\': is_alignment_left,\\n      \\'dc-dropdown__select-arrow--up\\': is_list_visible\\n    })\\n  }), error && /*#__PURE__*/external_react_[\"createElement\"](\"p\", {\\n    className: \"dc-field-error\"\\n  }, error), is_nativepicker ? /*#__PURE__*/external_react_[\"createElement\"](native_select, {\\n    ref: native_select_ref,\\n    name: name,\\n    value: value,\\n    list: list,\\n    onChange: onChange\\n  }) : /*#__PURE__*/external_react_[\"createElement\"](external_react_transition_group_[\"CSSTransition\"], {\\n    \"in\": is_list_visible,\\n    timeout: 100,\\n    classNames: transitionClassName(),\\n    onEntered: setListDimension,\\n    unmountOnExit: true\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: dropdownListClassName()\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: listClassNames(),\\n    ref: list_ref,\\n    style: getDropDownAlignment(),\\n    \"aria-expanded\": is_list_visible,\\n    role: \"list\"\\n  }, /*#__PURE__*/external_react_[\"createElement\"](themed_scrollbars[\"a\" /* default */], {\\n    height: list_dimensions[1] || \\'200px\\'\\n  }, Array.isArray(list) ? /*#__PURE__*/external_react_[\"createElement\"](DropdownItems, {\\n    items: list\\n  }) : Object.keys(list).map(function (key, idx) {\\n    return /*#__PURE__*/external_react_[\"createElement\"](external_react_[\"Fragment\"], {\\n      key: key\\n    }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n      className: external_classnames_default()(\\'dc-list__label\\', classNameLabel)\\n    }, key), /*#__PURE__*/external_react_[\"createElement\"](DropdownItems, {\\n      items: list[key]\\n    }), idx !== Object.keys(list).length - 1 && /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n      className: \"dc-list__separator\"\\n    }));\\n  })))))), !error && hint && /*#__PURE__*/external_react_[\"createElement\"](\"p\", {\\n    className: \"dc-dropdown__hint\"\\n  }, hint)));\\n};\\n\\ndropdown_Dropdown.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameDisplay: external_prop_types_default.a.string,\\n  classNameItems: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  disabled: external_prop_types_default.a.bool,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_alignment_left: external_prop_types_default.a.bool,\\n  is_large: external_prop_types_default.a.bool,\\n  is_nativepicker: external_prop_types_default.a.bool,\\n  is_nativepicker_visible: external_prop_types_default.a.bool,\\n  label: external_prop_types_default.a.string,\\n  list: dropdown_listPropType(),\\n  list_height: external_prop_types_default.a.string,\\n  name: external_prop_types_default.a.string,\\n  no_border: external_prop_types_default.a.bool,\\n  onChange: external_prop_types_default.a.func,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown = (dropdown_Dropdown);\\n// EXTERNAL MODULE: ./src/components/dropdown/dropdown.scss\\nvar dropdown_dropdown = __webpack_require__(68);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/list.scss\\nvar dropdown_list = __webpack_require__(69);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\\n\\n\\n\\n/* harmony default export */ var components_dropdown = __webpack_exports__[\"default\"] = (dropdown);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///112\\n')},14:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// CONCATENATED MODULE: ./src/hooks/use-hover.js\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\nvar use_hover_useHover = function useHover(refSetter) {\\n  var _React$useState = external_react_[\"useState\"](false),\\n      _React$useState2 = _slicedToArray(_React$useState, 2),\\n      value = _React$useState2[0],\\n      setValue = _React$useState2[1];\\n\\n  var ref = refSetter || external_react_[\"useRef\"](null);\\n\\n  var handleMouseOver = function handleMouseOver() {\\n    return setValue(true);\\n  };\\n\\n  var handleMouseOut = function handleMouseOut() {\\n    return setValue(false);\\n  };\\n\\n  external_react_[\"useEffect\"](function () {\\n    var node = ref.current;\\n\\n    if (node) {\\n      node.addEventListener(\\'mouseover\\', handleMouseOver);\\n      node.addEventListener(\\'mouseout\\', handleMouseOut);\\n      return function () {\\n        node.removeEventListener(\\'mouseover\\', handleMouseOver);\\n        node.removeEventListener(\\'mouseout\\', handleMouseOut);\\n      };\\n    }\\n\\n    return null;\\n  }, [ref.current]);\\n  return [ref, value];\\n};\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx\\nfunction themed_scrollbars_slicedToArray(arr, i) { return themed_scrollbars_arrayWithHoles(arr) || themed_scrollbars_iterableToArrayLimit(arr, i) || themed_scrollbars_unsupportedIterableToArray(arr, i) || themed_scrollbars_nonIterableRest(); }\\n\\nfunction themed_scrollbars_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction themed_scrollbars_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return themed_scrollbars_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return themed_scrollbars_arrayLikeToArray(o, minLen); }\\n\\nfunction themed_scrollbars_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction themed_scrollbars_iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction themed_scrollbars_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\nvar themed_scrollbars_ThemedScrollbars = function ThemedScrollbars(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      height = _ref.height,\\n      width = _ref.width,\\n      _ref$autohide = _ref.autohide,\\n      autohide = _ref$autohide === void 0 ? true : _ref$autohide,\\n      is_bypassed = _ref.is_bypassed,\\n      is_only_horizontal = _ref.is_only_horizontal,\\n      has_horizontal = _ref.has_horizontal,\\n      onScroll = _ref.onScroll,\\n      refSetter = _ref.refSetter;\\n  if (is_bypassed) return children;\\n\\n  var _useHover = use_hover_useHover(refSetter),\\n      _useHover2 = themed_scrollbars_slicedToArray(_useHover, 2),\\n      hoverRef = _useHover2[0],\\n      isHovered = _useHover2[1];\\n\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    ref: hoverRef,\\n    className: external_classnames_default()(\\'dc-themed-scrollbars\\', className, {\\n      \\'dc-themed-scrollbars__autohide\\': autohide,\\n      \\'dc-themed-scrollbars__autohide--is-hovered\\': autohide && isHovered,\\n      \\'dc-themed-scrollbars--has-horizontal\\': has_horizontal,\\n      \\'dc-themed-scrollbars--only-horizontal\\': is_only_horizontal\\n    }),\\n    style: {\\n      maxHeight: height || \\'100%\\',\\n      maxWidth: width || \\'none\\'\\n    },\\n    onScroll: onScroll\\n  }, children);\\n};\\n\\n/* harmony default export */ var themed_scrollbars = __webpack_exports__[\"a\"] = (themed_scrollbars_ThemedScrollbars);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2hvb2tzL3VzZS1ob3Zlci5qcz8zYzg5Iiwid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy90aGVtZWQtc2Nyb2xsYmFycy90aGVtZWQtc2Nyb2xsYmFycy5qc3g/NDEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgdXNlSG92ZXIgPSByZWZTZXR0ZXIgPT4ge1xuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgcmVmID0gcmVmU2V0dGVyIHx8IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICAgIGNvbnN0IGhhbmRsZU1vdXNlT3ZlciA9ICgpID0+IHNldFZhbHVlKHRydWUpO1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlT3V0ID0gKCkgPT4gc2V0VmFsdWUoZmFsc2UpO1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHJlZi5jdXJyZW50O1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBoYW5kbGVNb3VzZU92ZXIpO1xuICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGhhbmRsZU1vdXNlT3V0KTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGhhbmRsZU1vdXNlT3Zlcik7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGhhbmRsZU1vdXNlT3V0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgW3JlZi5jdXJyZW50XSk7XG5cbiAgICByZXR1cm4gW3JlZiwgdmFsdWVdO1xufTtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUhvdmVyIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlLWhvdmVyJztcblxuY29uc3QgVGhlbWVkU2Nyb2xsYmFycyA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGhlaWdodCxcbiAgICB3aWR0aCxcbiAgICBhdXRvaGlkZSA9IHRydWUsXG4gICAgaXNfYnlwYXNzZWQsXG4gICAgaXNfb25seV9ob3Jpem9udGFsLFxuICAgIGhhc19ob3Jpem9udGFsLFxuICAgIG9uU2Nyb2xsLFxuICAgIHJlZlNldHRlcixcbn0pID0+IHtcbiAgICBpZiAoaXNfYnlwYXNzZWQpIHJldHVybiBjaGlsZHJlbjtcbiAgICBjb25zdCBbaG92ZXJSZWYsIGlzSG92ZXJlZF0gPSB1c2VIb3ZlcihyZWZTZXR0ZXIpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIHJlZj17aG92ZXJSZWZ9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLXRoZW1lZC1zY3JvbGxiYXJzJywgY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgJ2RjLXRoZW1lZC1zY3JvbGxiYXJzX19hdXRvaGlkZSc6IGF1dG9oaWRlLFxuICAgICAgICAgICAgICAgICdkYy10aGVtZWQtc2Nyb2xsYmFyc19fYXV0b2hpZGUtLWlzLWhvdmVyZWQnOiBhdXRvaGlkZSAmJiBpc0hvdmVyZWQsXG4gICAgICAgICAgICAgICAgJ2RjLXRoZW1lZC1zY3JvbGxiYXJzLS1oYXMtaG9yaXpvbnRhbCc6IGhhc19ob3Jpem9udGFsLFxuICAgICAgICAgICAgICAgICdkYy10aGVtZWQtc2Nyb2xsYmFycy0tb25seS1ob3Jpem9udGFsJzogaXNfb25seV9ob3Jpem9udGFsLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIG1heEhlaWdodDogaGVpZ2h0IHx8ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogd2lkdGggfHwgJ25vbmUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uU2Nyb2xsPXtvblNjcm9sbH1cbiAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVkU2Nyb2xsYmFycztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFaQTtBQWlCQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///14\\n')},16:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-tiny-popover\"\\nvar external_react_tiny_popover_ = __webpack_require__(11);\\nvar external_react_tiny_popover_default = /*#__PURE__*/__webpack_require__.n(external_react_tiny_popover_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/index.js\\nvar components_icon = __webpack_require__(5);\\n\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover = /*#__PURE__*/function (_React$PureComponent) {\\n  _inherits(Popover, _React$PureComponent);\\n\\n  var _super = _createSuper(Popover);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    _classCallCheck(this, Popover);\\n\\n    _this = _super.call(this, props);\\n\\n    _this.toggleOpen = function () {\\n      _this.setState({\\n        is_open: Boolean(_this.props.message)\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      if (_this.props.is_bubble_hover_enabled) {\\n        _this.toggleIsOpenOnHoverPopoverBubble();\\n      } else {\\n        _this.setState({\\n          is_open: false\\n        });\\n      }\\n    };\\n\\n    _this.onMouseEnter = function () {\\n      _this.setState({\\n        is_bubble_open: true\\n      });\\n    };\\n\\n    _this.onMouseLeave = function () {\\n      _this.setState({\\n        is_bubble_open: false,\\n        is_open: false\\n      });\\n    };\\n\\n    _this.toggleIsOpenOnHoverPopoverBubble = function () {\\n      setTimeout(function () {\\n        // add delay to check if mouse is hovered on popover bubble\\n        _this.setState({\\n          is_open: _this.props.is_bubble_hover_enabled ? _this.state.is_bubble_open : false\\n        });\\n      }, 50);\\n    };\\n\\n    _this.state = {\\n      is_open: false,\\n      is_bubble_open: false,\\n      popover_ref: undefined\\n    };\\n\\n    _this.setWrapperRef = function (ref) {\\n      return _this.wrapper_ref = ref;\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error\\n      });\\n\\n      if (this.wrapper_ref) {\\n        this.setState({\\n          popover_ref: this.wrapper_ref\\n        });\\n      }\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          className = _this$props.className,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          counter = _this$props.counter,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          is_open = _this$props.is_open,\\n          margin = _this$props.margin,\\n          message = _this$props.message,\\n          zIndex = _this$props.zIndex,\\n          relative_render = _this$props.relative_render;\\n      var has_external_open_state = is_open !== undefined;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n        className: external_classnames_default()({\\n          \\'dc-popover__wrapper\\': relative_render\\n        })\\n      }, relative_render && /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-popover__container\",\\n        style: {\\n          zIndex: zIndex || 1\\n        }\\n      }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n        ref: this.setWrapperRef,\\n        className: \"dc-popover__container-relative\"\\n      })), (this.state.popover_ref || !relative_render) && /*#__PURE__*/external_react_[\"createElement\"](external_react_tiny_popover_default.a, _extends({\\n        isOpen: is_open !== null && is_open !== void 0 ? is_open : this.state.is_open,\\n        position: alignment,\\n        transitionDuration: 0.25,\\n        padding: margin + 8,\\n        contentDestination: relative_render ? this.state.popover_ref : document.body\\n      }, relative_render ? {\\n        contentLocation: function contentLocation(_ref) {\\n          var targetRect = _ref.targetRect,\\n              popoverRect = _ref.popoverRect,\\n              nudgedLeft = _ref.nudgedLeft;\\n          var screen_width = document.body.clientWidth;\\n          var total_width = targetRect.right + (popoverRect.width - targetRect.width / 2);\\n          var top_offset = 0;\\n          var left_offset = 0;\\n\\n          switch (alignment) {\\n            case \\'left\\':\\n              {\\n                left_offset = Math.abs((popoverRect.height > popoverRect.width ? nudgedLeft : popoverRect.width) + margin) * -1;\\n                top_offset = targetRect.height > popoverRect.height ? (targetRect.height - popoverRect.height) / 2 : (popoverRect.height - targetRect.height) / 2 * -1;\\n                break;\\n              }\\n\\n            case \\'right\\':\\n              {\\n                left_offset = popoverRect.width + margin;\\n                top_offset = targetRect.height > popoverRect.height ? (targetRect.height - popoverRect.height) / 2 : (popoverRect.height - targetRect.height) / 2 * -1;\\n                break;\\n              }\\n\\n            case \\'top\\':\\n              {\\n                left_offset = total_width > screen_width ? Math.abs(total_width - screen_width) * -1 : 0;\\n                top_offset = Math.abs(popoverRect.height + margin) * -1;\\n                break;\\n              }\\n\\n            case \\'bottom\\':\\n              {\\n                left_offset = total_width > screen_width ? Math.abs(total_width - screen_width) * -1 : 0;\\n                top_offset = targetRect.height + margin;\\n                break;\\n              }\\n\\n            default:\\n              break;\\n          }\\n\\n          return {\\n            top: top_offset,\\n            left: left_offset\\n          };\\n        }\\n      } : {\\n        containerStyle: {\\n          zIndex: zIndex || 1\\n        }\\n      }, {\\n        content: function content(_ref2) {\\n          var position = _ref2.position,\\n              targetRect = _ref2.targetRect,\\n              popoverRect = _ref2.popoverRect;\\n          return /*#__PURE__*/external_react_[\"createElement\"](external_react_tiny_popover_[\"ArrowContainer\"], {\\n            position: position,\\n            targetRect: targetRect,\\n            popoverRect: popoverRect,\\n            arrowColor: has_error ? \\'var(--status-danger)\\' : \\'var(--general-active)\\',\\n            arrowSize: 5\\n          }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n            id: id,\\n            className: external_classnames_default()(classNameBubble, \\'dc-popover__bubble\\', {\\n              \\'dc-popover__bubble--error\\': has_error\\n            }),\\n            onMouseEnter: _this2.onMouseEnter,\\n            onMouseLeave: _this2.onMouseLeave\\n          }, !disable_message_icon && icon === \\'info\\' && /*#__PURE__*/external_react_[\"createElement\"](\"i\", {\\n            className: \"dc-popover__bubble__icon\"\\n          }, /*#__PURE__*/external_react_[\"createElement\"](components_icon[\"default\"], {\\n            icon: \"IcInfoBlue\"\\n          })), /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n            className: external_classnames_default()(\\'dc-popover__bubble__text\\', {\\n              \\'dc-popover__bubble__text--error\\': has_error\\n            })\\n          }, message)));\\n        }\\n      }), /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n        className: external_classnames_default()(\\'dc-popover\\', className),\\n        id: id,\\n        onMouseEnter: has_external_open_state ? undefined : this.toggleOpen,\\n        onMouseLeave: has_external_open_state ? undefined : this.toggleClose\\n      }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\')\\n      }, !disable_target_icon && /*#__PURE__*/external_react_[\"createElement\"](\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && /*#__PURE__*/external_react_[\"createElement\"](components_icon[\"default\"], {\\n        icon: \"IcInfoOutline\",\\n        className: icon_class_name\\n      }), icon === \\'question\\' && /*#__PURE__*/external_react_[\"createElement\"](components_icon[\"default\"], {\\n        icon: \"IcUnknown\",\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && /*#__PURE__*/external_react_[\"createElement\"](components_icon[\"default\"], {\\n        icon: \"IcCircle\",\\n        className: icon_class_name,\\n        size: 4\\n      }), icon === \\'counter\\' && /*#__PURE__*/external_react_[\"createElement\"](\"span\", {\\n        className: icon_class_name\\n      }, counter)), children))));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_[\"PureComponent\"]);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\',\\n  margin: 0,\\n  relative_render: false\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  counter: external_prop_types_default.a.number,\\n  disable_message_icon: external_prop_types_default.a.bool,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.oneOf([\\'info\\', \\'question\\', \\'dot\\', \\'counter\\']),\\n  id: external_prop_types_default.a.string,\\n  is_bubble_hover_enabled: external_prop_types_default.a.bool,\\n  is_open: external_prop_types_default.a.bool,\\n  relative_render: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.oneOfType([external_prop_types_default.a.node, external_prop_types_default.a.object, external_prop_types_default.a.string]),\\n  portal_container: external_prop_types_default.a.string,\\n  zIndex: external_prop_types_default.a.number\\n};\\n/* harmony default export */ var popover = (popover_Popover);\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover_popover = __webpack_require__(20);\\n\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n\\n\\n/* harmony default export */ var components_popover = __webpack_exports__[\"default\"] = (popover);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///16\\n')},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},20:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/YjI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTk0MDQ4ODY1MzAyXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///20\\n\")},24:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return useOnClickOutside; });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n\\nvar useOnClickOutside = function useOnClickOutside(ref, handler, validationFn) {\\n  react__WEBPACK_IMPORTED_MODULE_0__[\\\"useEffect\\\"](function () {\\n    var listener = function listener(event) {\\n      var _event$path, _event$composedPath;\\n\\n      var path = (_event$path = event.path) !== null && _event$path !== void 0 ? _event$path : (_event$composedPath = event.composedPath) === null || _event$composedPath === void 0 ? void 0 : _event$composedPath.call(event); // When component is isolated (e.g, iframe, shadow DOM) event.target refers to whole container not the component. path[0] is the node that the event originated from, it does not need to walk the array\\n\\n      if (ref && ref.current && !ref.current.contains(event.target) && !ref.current.contains(path && path[0])) {\\n        if (validationFn && !validationFn(event)) return;\\n        handler(event);\\n      }\\n    };\\n\\n    document.addEventListener('mousedown', listener);\\n    return function () {\\n      document.removeEventListener('mousedown', listener);\\n    };\\n  }, [ref, handler]);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2hvb2tzL3VzZS1vbmNsaWNrb3V0c2lkZS5qcz8zYmVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VPbkNsaWNrT3V0c2lkZSA9IChyZWYsIGhhbmRsZXIsIHZhbGlkYXRpb25GbikgPT4ge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gZXZlbnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGV2ZW50LnBhdGggPz8gZXZlbnQuY29tcG9zZWRQYXRoPy4oKTtcblxuICAgICAgICAgICAgLy8gV2hlbiBjb21wb25lbnQgaXMgaXNvbGF0ZWQgKGUuZywgaWZyYW1lLCBzaGFkb3cgRE9NKSBldmVudC50YXJnZXQgcmVmZXJzIHRvIHdob2xlIGNvbnRhaW5lciBub3QgdGhlIGNvbXBvbmVudC4gcGF0aFswXSBpcyB0aGUgbm9kZSB0aGF0IHRoZSBldmVudCBvcmlnaW5hdGVkIGZyb20sIGl0IGRvZXMgbm90IG5lZWQgdG8gd2FsayB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmIChyZWYgJiYgcmVmLmN1cnJlbnQgJiYgKCFyZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFyZWYuY3VycmVudC5jb250YWlucyhwYXRoICYmIHBhdGhbMF0pKSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRm4gJiYgIXZhbGlkYXRpb25GbihldmVudCkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBsaXN0ZW5lcik7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICB9LCBbcmVmLCBoYW5kbGVyXSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///24\\n\")},3:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJAZGVyaXYvc2hhcmVkXCI/MTM5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},4:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__);\\n\\n\\n\\n\\n\\nvar Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      id = _ref.id,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = Object(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(filenames[1]);\\n  }\\n\\n  var sprite_id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : Object(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(icon);\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    id: id,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(Object(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__[\\\"getUrlBase\\\"])(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(sprite_id)\\n  }));\\n};\\n\\nIcon.propTypes = {\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  custom_color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  height: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  icon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  size: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  width: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string])\\n};\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\\\"memo\\\"](Icon));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEtlYmFiQ2FzZSwgZ2V0VXJsQmFzZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuXG5jb25zdCBJY29uID0gKHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IsXG4gICAgY3VzdG9tX2NvbG9yLFxuICAgIGhlaWdodCxcbiAgICBpY29uLFxuICAgIGlkLFxuICAgIG9uQ2xpY2ssXG4gICAgb25Nb3VzZUVudGVyLFxuICAgIG9uTW91c2VMZWF2ZSxcbiAgICBzaXplID0gMTYsXG4gICAgd2lkdGgsXG59KSA9PiB7XG4gICAgaWYgKCFpY29uKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBmaWxlbmFtZSA9ICdjb21tb24nO1xuICAgIGNvbnN0IGZpbGVuYW1lcyA9IC9eSWMoQ3VycmVuY3l8VHJhZGV0eXBlfE10NXxGbGFnfFVuZGVybHlpbmcpL2cuZXhlYyhpY29uKTtcbiAgICBpZiAoZmlsZW5hbWVzKSB7XG4gICAgICAgIGZpbGVuYW1lID0gZ2V0S2ViYWJDYXNlKGZpbGVuYW1lc1sxXSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3ByaXRlX2lkID0gaWNvbi5zdGFydHNXaXRoKCdJY1VuZGVybHlpbmcnKVxuICAgICAgICA/IGBpYy11bmRlcmx5aW5nLSR7aWNvbi5zcGxpdCgnSWNVbmRlcmx5aW5nJylbMV0udG9VcHBlckNhc2UoKX1gXG4gICAgICAgIDogZ2V0S2ViYWJDYXNlKGljb24pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPHN2Z1xuICAgICAgICAgICAgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICAgICAgICAgICAgeG1sbnNYbGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtaWNvbicsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICdkYy1pY29uLS1hY3RpdmUnOiBjb2xvciA9PT0gJ2FjdGl2ZScsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWRpc2FibGVkJzogY29sb3IgPT09ICdkaXNhYmxlZCcsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWdyZWVuJzogY29sb3IgPT09ICdncmVlbicgfHwgaWNvbiA9PT0gJ0ljUHJvZml0JyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tcmVkJzogY29sb3IgPT09ICdyZWQnIHx8IGljb24gPT09ICdJY0xvc3MnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1zZWNvbmRhcnknOiBjb2xvciA9PT0gJ3NlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWJyYW5kJzogY29sb3IgPT09ICdicmFuZCcsXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0IHx8IHNpemV9XG4gICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICB3aWR0aD17d2lkdGggfHwgc2l6ZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17b25Nb3VzZUxlYXZlfVxuICAgICAgICAgICAgc3R5bGU9e1xuICAgICAgICAgICAgICAgIGN1c3RvbV9jb2xvclxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJy0tZmlsbC1jb2xvcjEnOiBjdXN0b21fY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgICA8dXNlIHhsaW5rSHJlZj17YCR7Z2V0VXJsQmFzZShgL3B1YmxpYy9pbWFnZXMvc3ByaXRlLyR7ZmlsZW5hbWV9LnN2Z2ApfSMke3Nwcml0ZV9pZH1gfSAvPlxuICAgICAgICA8L3N2Zz5cbiAgICApO1xufTtcblxuSWNvbi5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgY29sb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgY3VzdG9tX2NvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhJY29uKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFuQkE7QUF5QkE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFhQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///4\\n\")},5:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _icon_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\\n/* harmony import */ var _icon_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\\n/* harmony import */ var _icon_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_icon_scss__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\n/* harmony default export */ __webpack_exports__[\"default\"] = (_icon_jsx__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2luZGV4LmpzP2FlNjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEljb24gZnJvbSAnLi9pY29uLmpzeCc7XG5pbXBvcnQgJy4vaWNvbi5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///5\\n')},6:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uc2Nzcz9iOGM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTQwNDg4NjYzNDVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///6\\n\")},68:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uc2Nzcz82ZDA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTQwNDg4NjMzNThcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///68\\n\")},69:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzP2YzMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU5NDA0ODg2MzU1OFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///69\\n\")},8:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")}}).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.js\n");

/***/ }),

/***/ "../../components/lib/fade-wrapper.css":
/*!******************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/fade-wrapper.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZmFkZS13cmFwcGVyLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvU2FyYS9wcm9qZWN0L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9mYWRlLXdyYXBwZXIuY3NzPzQ2MTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/fade-wrapper.css\n");

/***/ }),

/***/ "../../components/lib/fade-wrapper.js":
/*!*****************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/fade-wrapper.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! react-pose */ \"../../components/node_modules/react-pose/dist/react-pose.es.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__29__){return function(e){var n={};function t(I){if(n[I])return n[I].exports;var a=n[I]={i:I,l:!1,exports:{}};return e[I].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=n,t.d=function(e,n,I){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:I})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var I=Object.create(null);if(t.r(I),Object.defineProperty(I,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var a in e)t.d(I,a,function(n){return e[n]}.bind(null,a));return I},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=136)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},136:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, \"default\", function() { return /* reexport */ fade_wrapper_fade_wrapper; });\\n\\n// EXTERNAL MODULE: ./src/components/fade-wrapper/fade-wrapper.scss\\nvar fade_wrapper = __webpack_require__(71);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-pose\"\\nvar external_react_pose_ = __webpack_require__(29);\\nvar external_react_pose_default = /*#__PURE__*/__webpack_require__.n(external_react_pose_);\\n\\n// CONCATENATED MODULE: ./src/components/fade-wrapper/fade-wrapper.jsx\\n\\n\\n\\nvar FadeInFromTopDiv = external_react_pose_default.a.div({\\n  enter: {\\n    y: 0,\\n    opacity: 1,\\n    delay: 300,\\n    transition: {\\n      \"default\": {\\n        duration: 250\\n      }\\n    }\\n  },\\n  exit: {\\n    y: -50,\\n    opacity: 0,\\n    transition: {\\n      duration: 250\\n    }\\n  }\\n});\\nvar FadeInFromBottomDiv = external_react_pose_default.a.div({\\n  enter: {\\n    y: 0,\\n    opacity: 1,\\n    delay: 300,\\n    transition: {\\n      \"default\": {\\n        duration: 250\\n      }\\n    }\\n  },\\n  exit: {\\n    y: 50,\\n    opacity: 0,\\n    transition: {\\n      duration: 250\\n    }\\n  }\\n});\\nvar FadeInOnlyDiv = external_react_pose_default.a.div({\\n  enter: {\\n    opacity: 1,\\n    transition: {\\n      duration: 300\\n    }\\n  },\\n  exit: {\\n    opacity: 0,\\n    transition: {\\n      duration: 300\\n    }\\n  }\\n}); // `flipMove={false}` is necessary to fix react-pose bug: https://github.com/Popmotion/popmotion/issues/805\\n\\nvar fade_wrapper_FadeWrapper = function FadeWrapper(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      is_visible = _ref.is_visible,\\n      keyname = _ref.keyname,\\n      type = _ref.type;\\n\\n  if (type === \\'top\\') {\\n    return /*#__PURE__*/external_react_[\"createElement\"](external_react_pose_[\"PoseGroup\"], {\\n      flipMove: false\\n    }, is_visible && /*#__PURE__*/external_react_[\"createElement\"](FadeInFromTopDiv, {\\n      className: className,\\n      key: keyname\\n    }, children));\\n  }\\n\\n  if (type === \\'bottom\\') {\\n    return /*#__PURE__*/external_react_[\"createElement\"](external_react_pose_[\"PoseGroup\"], {\\n      flipMove: false\\n    }, is_visible && /*#__PURE__*/external_react_[\"createElement\"](FadeInFromBottomDiv, {\\n      className: className,\\n      key: keyname\\n    }, children));\\n  }\\n\\n  return /*#__PURE__*/external_react_[\"createElement\"](external_react_pose_[\"PoseGroup\"], {\\n    flipMove: false\\n  }, is_visible && /*#__PURE__*/external_react_[\"createElement\"](FadeInOnlyDiv, {\\n    className: className,\\n    key: keyname\\n  }, children));\\n};\\n\\nfade_wrapper_FadeWrapper.propTypes = {\\n  children: external_prop_types_default.a.node,\\n  is_visible: external_prop_types_default.a.bool,\\n  keyname: external_prop_types_default.a.string,\\n  type: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var fade_wrapper_fade_wrapper = (fade_wrapper_FadeWrapper);\\n// CONCATENATED MODULE: ./src/components/fade-wrapper/index.js\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ZhZGUtd3JhcHBlci9mYWRlLXdyYXBwZXIuanN4P2Q1NzkiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ZhZGUtd3JhcHBlci9pbmRleC5qcz9mNDg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHBvc2VkLCB7IFBvc2VHcm91cCB9IGZyb20gJ3JlYWN0LXBvc2UnO1xuXG5jb25zdCBGYWRlSW5Gcm9tVG9wRGl2ID0gcG9zZWQuZGl2KHtcbiAgICBlbnRlcjoge1xuICAgICAgICB5OiAwLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBkZWxheTogMzAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB7IGR1cmF0aW9uOiAyNTAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgICAgeTogLTUwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAyNTAgfSxcbiAgICB9LFxufSk7XG5cbmNvbnN0IEZhZGVJbkZyb21Cb3R0b21EaXYgPSBwb3NlZC5kaXYoe1xuICAgIGVudGVyOiB7XG4gICAgICAgIHk6IDAsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGRlbGF5OiAzMDAsXG4gICAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHsgZHVyYXRpb246IDI1MCB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgICB5OiA1MCxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMjUwIH0sXG4gICAgfSxcbn0pO1xuXG5jb25zdCBGYWRlSW5Pbmx5RGl2ID0gcG9zZWQuZGl2KHtcbiAgICBlbnRlcjoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAzMDAgfSxcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMzAwIH0sXG4gICAgfSxcbn0pO1xuXG4vLyBgZmxpcE1vdmU9e2ZhbHNlfWAgaXMgbmVjZXNzYXJ5IHRvIGZpeCByZWFjdC1wb3NlIGJ1ZzogaHR0cHM6Ly9naXRodWIuY29tL1BvcG1vdGlvbi9wb3Btb3Rpb24vaXNzdWVzLzgwNVxuY29uc3QgRmFkZVdyYXBwZXIgPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBpc192aXNpYmxlLCBrZXluYW1lLCB0eXBlIH0pID0+IHtcbiAgICBpZiAodHlwZSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQb3NlR3JvdXAgZmxpcE1vdmU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICB7aXNfdmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxGYWRlSW5Gcm9tVG9wRGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBrZXk9e2tleW5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L0ZhZGVJbkZyb21Ub3BEaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUG9zZUdyb3VwPlxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQb3NlR3JvdXAgZmxpcE1vdmU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICB7aXNfdmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxGYWRlSW5Gcm9tQm90dG9tRGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBrZXk9e2tleW5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L0ZhZGVJbkZyb21Cb3R0b21EaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUG9zZUdyb3VwPlxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgICA8UG9zZUdyb3VwIGZsaXBNb3ZlPXtmYWxzZX0+XG4gICAgICAgICAgICB7aXNfdmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgPEZhZGVJbk9ubHlEaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IGtleT17a2V5bmFtZX0+XG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L0ZhZGVJbk9ubHlEaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L1Bvc2VHcm91cD5cbiAgICApO1xufTtcblxuRmFkZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBpc192aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBrZXluYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGYWRlV3JhcHBlcjtcbiIsImltcG9ydCAnLi9mYWRlLXdyYXBwZXIuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZyb20gJy4vZmFkZS13cmFwcGVyLmpzeCc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBSkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFIQTtBQVRBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBSkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFIQTtBQVRBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBTEE7QUFDQTtBQVdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BOztBQ3pGQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///136\\n')},29:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__29__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtcG9zZVwiPzk2YjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yOV9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///29\\n\")},71:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZmFkZS13cmFwcGVyL2ZhZGUtd3JhcHBlci5zY3NzPzQ0ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU5NDA0ODg2Mzc1NFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///71\\n\")}}).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/fade-wrapper.js\n");

/***/ }),

/***/ "../../components/lib/page-overlay.css":
/*!******************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/page-overlay.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvcGFnZS1vdmVybGF5LmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvU2FyYS9wcm9qZWN0L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9wYWdlLW92ZXJsYXkuY3NzP2RkYWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/page-overlay.css\n");

/***/ }),

/***/ "../../components/lib/page-overlay.js":
/*!*****************************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/page-overlay.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,_){ true?module.exports=_(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! react-dom */ \"../node_modules/react-dom/index.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__18__){return function(e){var _={};function n(a){if(_[a])return _[a].exports;var t=_[a]={i:a,l:!1,exports:{}};return e[a].call(t.exports,t,t.exports,n),t.l=!0,t.exports}return n.m=e,n.c=_,n.d=function(e,_,a){n.o(e,_)||Object.defineProperty(e,_,{enumerable:!0,get:a})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,_){if(1&_&&(e=n(e)),8&_)return e;if(4&_&&\"object\"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,\"default\",{enumerable:!0,value:e}),2&_&&\"string\"!=typeof e)for(var t in e)n.d(a,t,function(_){return e[_]}.bind(null,t));return a},n.n=function(e){var _=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(_,\"a\",_),_},n.o=function(e,_){return Object.prototype.hasOwnProperty.call(e,_)},n.p=\"\",n(n.s=150)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},150:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-dom\"\\nvar external_react_dom_ = __webpack_require__(18);\\nvar external_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_react_dom_);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(8);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/icon.jsx\\nvar icon = __webpack_require__(4);\\n\\n// EXTERNAL MODULE: ./src/hooks/use-onclickoutside.js\\nvar use_onclickoutside = __webpack_require__(24);\\n\\n// CONCATENATED MODULE: ./src/components/page-overlay/page-overlay.jsx\\n\\n\\n\\n\\n\\n\\n\\n\\nvar page_overlay_PageOverlay = function PageOverlay(_ref) {\\n  var portal_id = _ref.portal_id,\\n      children = _ref.children,\\n      header = _ref.header,\\n      id = _ref.id,\\n      onClickClose = _ref.onClickClose,\\n      is_open = _ref.is_open;\\n  var page_overlay_ref = external_react_[\"useRef\"]();\\n  Object(use_onclickoutside[\"a\" /* useOnClickOutside */])(page_overlay_ref, onClickClose, function () {\\n    return is_open && portal_id;\\n  });\\n  var el_page_overlay = /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    ref: page_overlay_ref,\\n    id: id,\\n    className: external_classnames_default()(\\'dc-page-overlay\\', {\\n      \\'dc-page-overlay-portal\\': !!portal_id\\n    })\\n  }, header && /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-page-overlay__header\"\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-page-overlay__header-wrapper\"\\n  }, /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-page-overlay__header-title\"\\n  }, header), /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-page-overlay__header-close\",\\n    onClick: onClickClose || window.history.back\\n  }, /*#__PURE__*/external_react_[\"createElement\"](icon[\"a\" /* default */], {\\n    icon: \"IcCross\"\\n  })))), /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-page-overlay__content\"\\n  }, children));\\n\\n  if (portal_id) {\\n    return /*#__PURE__*/external_react_dom_default.a.createPortal( /*#__PURE__*/external_react_[\"createElement\"](external_react_transition_group_[\"CSSTransition\"], {\\n      appear: true,\\n      \"in\": is_open,\\n      timeout: 250,\\n      classNames: {\\n        appear: \\'dc-page-overlay--enter\\',\\n        enter: \\'dc-page-overlay--enter\\',\\n        enterDone: \\'dc-page-overlay--enter-done\\',\\n        exit: \\'dc-page-overlay--exit\\'\\n      },\\n      unmountOnExit: true\\n    }, el_page_overlay), document.getElementById(portal_id));\\n  }\\n\\n  return /*#__PURE__*/external_react_[\"createElement\"](external_react_[\"Fragment\"], null, el_page_overlay);\\n};\\n\\npage_overlay_PageOverlay.propTypes = {\\n  children: external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.node), external_prop_types_default.a.node]),\\n  header: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.node]),\\n  id: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number]),\\n  onClickClose: external_prop_types_default.a.func,\\n  portal_id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool\\n};\\n/* harmony default export */ var page_overlay = (page_overlay_PageOverlay);\\n// EXTERNAL MODULE: ./src/components/page-overlay/page-overlay.scss\\nvar page_overlay_page_overlay = __webpack_require__(86);\\n\\n// CONCATENATED MODULE: ./src/components/page-overlay/index.js\\n\\n\\n/* harmony default export */ var components_page_overlay = __webpack_exports__[\"default\"] = (page_overlay);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3BhZ2Utb3ZlcmxheS9wYWdlLW92ZXJsYXkuanN4P2YwMGUiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3BhZ2Utb3ZlcmxheS9pbmRleC5qcz9hNTc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJY29uIGZyb20gJ0NvbXBvbmVudHMvaWNvbi9pY29uLmpzeCc7XG5pbXBvcnQgeyB1c2VPbkNsaWNrT3V0c2lkZSB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS1vbmNsaWNrb3V0c2lkZSc7XG5cbmNvbnN0IFBhZ2VPdmVybGF5ID0gKHsgcG9ydGFsX2lkLCBjaGlsZHJlbiwgaGVhZGVyLCBpZCwgb25DbGlja0Nsb3NlLCBpc19vcGVuIH0pID0+IHtcbiAgICBjb25zdCBwYWdlX292ZXJsYXlfcmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgICB1c2VPbkNsaWNrT3V0c2lkZShwYWdlX292ZXJsYXlfcmVmLCBvbkNsaWNrQ2xvc2UsICgpID0+IGlzX29wZW4gJiYgcG9ydGFsX2lkKTtcblxuICAgIGNvbnN0IGVsX3BhZ2Vfb3ZlcmxheSA9IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgcmVmPXtwYWdlX292ZXJsYXlfcmVmfVxuICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy1wYWdlLW92ZXJsYXknLCB7XG4gICAgICAgICAgICAgICAgJ2RjLXBhZ2Utb3ZlcmxheS1wb3J0YWwnOiAhIXBvcnRhbF9pZCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgICB7aGVhZGVyICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGMtcGFnZS1vdmVybGF5X19oZWFkZXInPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGMtcGFnZS1vdmVybGF5X19oZWFkZXItd3JhcHBlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGMtcGFnZS1vdmVybGF5X19oZWFkZXItdGl0bGUnPntoZWFkZXJ9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGMtcGFnZS1vdmVybGF5X19oZWFkZXItY2xvc2UnIG9uQ2xpY2s9e29uQ2xpY2tDbG9zZSB8fCB3aW5kb3cuaGlzdG9yeS5iYWNrfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBpY29uPSdJY0Nyb3NzJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkYy1wYWdlLW92ZXJsYXlfX2NvbnRlbnQnPntjaGlsZHJlbn08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcblxuICAgIGlmIChwb3J0YWxfaWQpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcbiAgICAgICAgICAgIDxDU1NUcmFuc2l0aW9uXG4gICAgICAgICAgICAgICAgYXBwZWFyXG4gICAgICAgICAgICAgICAgaW49e2lzX29wZW59XG4gICAgICAgICAgICAgICAgdGltZW91dD17MjUwfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXM9e3tcbiAgICAgICAgICAgICAgICAgICAgYXBwZWFyOiAnZGMtcGFnZS1vdmVybGF5LS1lbnRlcicsXG4gICAgICAgICAgICAgICAgICAgIGVudGVyOiAnZGMtcGFnZS1vdmVybGF5LS1lbnRlcicsXG4gICAgICAgICAgICAgICAgICAgIGVudGVyRG9uZTogJ2RjLXBhZ2Utb3ZlcmxheS0tZW50ZXItZG9uZScsXG4gICAgICAgICAgICAgICAgICAgIGV4aXQ6ICdkYy1wYWdlLW92ZXJsYXktLWV4aXQnLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgdW5tb3VudE9uRXhpdFxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlbF9wYWdlX292ZXJsYXl9XG4gICAgICAgICAgICA8L0NTU1RyYW5zaXRpb24+LFxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9ydGFsX2lkKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiA8PntlbF9wYWdlX292ZXJsYXl9PC8+O1xufTtcblxuUGFnZU92ZXJsYXkucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubm9kZSksIFByb3BUeXBlcy5ub2RlXSksXG4gICAgaGVhZGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgb25DbGlja0Nsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwb3J0YWxfaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaXNfb3BlbjogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYWdlT3ZlcmxheTtcbiIsImltcG9ydCBQYWdlT3ZlcmxheSBmcm9tICcuL3BhZ2Utb3ZlcmxheS5qc3gnO1xuaW1wb3J0ICcuL3BhZ2Utb3ZlcmxheS5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgUGFnZU92ZXJsYXk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUhBO0FBUUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUtBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQVZBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBU0E7Ozs7O0FDbkVBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///150\\n')},18:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__18__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtZG9tXCI/NWU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE4X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///18\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},24:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return useOnClickOutside; });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n\\nvar useOnClickOutside = function useOnClickOutside(ref, handler, validationFn) {\\n  react__WEBPACK_IMPORTED_MODULE_0__[\\\"useEffect\\\"](function () {\\n    var listener = function listener(event) {\\n      var _event$path, _event$composedPath;\\n\\n      var path = (_event$path = event.path) !== null && _event$path !== void 0 ? _event$path : (_event$composedPath = event.composedPath) === null || _event$composedPath === void 0 ? void 0 : _event$composedPath.call(event); // When component is isolated (e.g, iframe, shadow DOM) event.target refers to whole container not the component. path[0] is the node that the event originated from, it does not need to walk the array\\n\\n      if (ref && ref.current && !ref.current.contains(event.target) && !ref.current.contains(path && path[0])) {\\n        if (validationFn && !validationFn(event)) return;\\n        handler(event);\\n      }\\n    };\\n\\n    document.addEventListener('mousedown', listener);\\n    return function () {\\n      document.removeEventListener('mousedown', listener);\\n    };\\n  }, [ref, handler]);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2hvb2tzL3VzZS1vbmNsaWNrb3V0c2lkZS5qcz8zYmVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VPbkNsaWNrT3V0c2lkZSA9IChyZWYsIGhhbmRsZXIsIHZhbGlkYXRpb25GbikgPT4ge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gZXZlbnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGV2ZW50LnBhdGggPz8gZXZlbnQuY29tcG9zZWRQYXRoPy4oKTtcblxuICAgICAgICAgICAgLy8gV2hlbiBjb21wb25lbnQgaXMgaXNvbGF0ZWQgKGUuZywgaWZyYW1lLCBzaGFkb3cgRE9NKSBldmVudC50YXJnZXQgcmVmZXJzIHRvIHdob2xlIGNvbnRhaW5lciBub3QgdGhlIGNvbXBvbmVudC4gcGF0aFswXSBpcyB0aGUgbm9kZSB0aGF0IHRoZSBldmVudCBvcmlnaW5hdGVkIGZyb20sIGl0IGRvZXMgbm90IG5lZWQgdG8gd2FsayB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmIChyZWYgJiYgcmVmLmN1cnJlbnQgJiYgKCFyZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFyZWYuY3VycmVudC5jb250YWlucyhwYXRoICYmIHBhdGhbMF0pKSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRm4gJiYgIXZhbGlkYXRpb25GbihldmVudCkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBsaXN0ZW5lcik7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICB9LCBbcmVmLCBoYW5kbGVyXSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///24\\n\")},3:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJAZGVyaXYvc2hhcmVkXCI/MTM5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},4:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__);\\n\\n\\n\\n\\n\\nvar Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      id = _ref.id,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = Object(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(filenames[1]);\\n  }\\n\\n  var sprite_id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : Object(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(icon);\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    id: id,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(Object(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__[\\\"getUrlBase\\\"])(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(sprite_id)\\n  }));\\n};\\n\\nIcon.propTypes = {\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  custom_color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  height: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  icon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  size: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  width: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string])\\n};\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__[\\\"memo\\\"](Icon));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEtlYmFiQ2FzZSwgZ2V0VXJsQmFzZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuXG5jb25zdCBJY29uID0gKHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IsXG4gICAgY3VzdG9tX2NvbG9yLFxuICAgIGhlaWdodCxcbiAgICBpY29uLFxuICAgIGlkLFxuICAgIG9uQ2xpY2ssXG4gICAgb25Nb3VzZUVudGVyLFxuICAgIG9uTW91c2VMZWF2ZSxcbiAgICBzaXplID0gMTYsXG4gICAgd2lkdGgsXG59KSA9PiB7XG4gICAgaWYgKCFpY29uKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBmaWxlbmFtZSA9ICdjb21tb24nO1xuICAgIGNvbnN0IGZpbGVuYW1lcyA9IC9eSWMoQ3VycmVuY3l8VHJhZGV0eXBlfE10NXxGbGFnfFVuZGVybHlpbmcpL2cuZXhlYyhpY29uKTtcbiAgICBpZiAoZmlsZW5hbWVzKSB7XG4gICAgICAgIGZpbGVuYW1lID0gZ2V0S2ViYWJDYXNlKGZpbGVuYW1lc1sxXSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3ByaXRlX2lkID0gaWNvbi5zdGFydHNXaXRoKCdJY1VuZGVybHlpbmcnKVxuICAgICAgICA/IGBpYy11bmRlcmx5aW5nLSR7aWNvbi5zcGxpdCgnSWNVbmRlcmx5aW5nJylbMV0udG9VcHBlckNhc2UoKX1gXG4gICAgICAgIDogZ2V0S2ViYWJDYXNlKGljb24pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPHN2Z1xuICAgICAgICAgICAgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICAgICAgICAgICAgeG1sbnNYbGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtaWNvbicsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICdkYy1pY29uLS1hY3RpdmUnOiBjb2xvciA9PT0gJ2FjdGl2ZScsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWRpc2FibGVkJzogY29sb3IgPT09ICdkaXNhYmxlZCcsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWdyZWVuJzogY29sb3IgPT09ICdncmVlbicgfHwgaWNvbiA9PT0gJ0ljUHJvZml0JyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tcmVkJzogY29sb3IgPT09ICdyZWQnIHx8IGljb24gPT09ICdJY0xvc3MnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1zZWNvbmRhcnknOiBjb2xvciA9PT0gJ3NlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWJyYW5kJzogY29sb3IgPT09ICdicmFuZCcsXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0IHx8IHNpemV9XG4gICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICB3aWR0aD17d2lkdGggfHwgc2l6ZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17b25Nb3VzZUxlYXZlfVxuICAgICAgICAgICAgc3R5bGU9e1xuICAgICAgICAgICAgICAgIGN1c3RvbV9jb2xvclxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJy0tZmlsbC1jb2xvcjEnOiBjdXN0b21fY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgICA8dXNlIHhsaW5rSHJlZj17YCR7Z2V0VXJsQmFzZShgL3B1YmxpYy9pbWFnZXMvc3ByaXRlLyR7ZmlsZW5hbWV9LnN2Z2ApfSMke3Nwcml0ZV9pZH1gfSAvPlxuICAgICAgICA8L3N2Zz5cbiAgICApO1xufTtcblxuSWNvbi5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgY29sb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgY3VzdG9tX2NvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhJY29uKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFuQkE7QUF5QkE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFhQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///4\\n\")},8:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")},86:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS1vdmVybGF5L3BhZ2Utb3ZlcmxheS5zY3NzPzAwNzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU5NDA0ODg2NTcwOFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///86\\n\")}}).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/page-overlay.js\n");

/***/ }),

/***/ "../../components/lib/table.css":
/*!***********************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/table.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvdGFibGUuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9Vc2Vycy9TYXJhL3Byb2plY3QvZGVyaXYtYXBwL3BhY2thZ2VzL2NvbXBvbmVudHMvbGliL3RhYmxlLmNzcz9jZDM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/table.css\n");

/***/ }),

/***/ "../../components/lib/table.js":
/*!**********************************************************************!*\
  !*** /Users/Sara/project/deriv-app/packages/components/lib/table.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=110)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},110:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// CONCATENATED MODULE: ./src/components/table/table-head.jsx\\n\\n\\n\\n\\nvar table_head_Head = function Head(_ref) {\\n  var children = _ref.children,\\n      align = _ref.align,\\n      className = _ref.className,\\n      fixed = _ref.fixed;\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    role: \"columnheader\",\\n    className: external_classnames_default()(\\'dc-table__head\\', className, {\\n      \\'dc-table__cell--right\\': align === \\'right\\',\\n      \\'dc-table__cell--fixed\\': fixed\\n    })\\n  }, children);\\n};\\n\\ntable_head_Head.propTypes = {\\n  align: external_prop_types_default.a.oneOf([\\'left\\', \\'right\\']),\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  fixed: external_prop_types_default.a.bool\\n};\\n/* harmony default export */ var table_head = (table_head_Head);\\n// CONCATENATED MODULE: ./src/components/table/table-header.jsx\\n\\n\\n\\n\\nvar table_header_Header = function Header(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className;\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    role: \"rowgroup\",\\n    className: external_classnames_default()(\\'dc-table__header\\', className)\\n  }, children);\\n};\\n\\ntable_header_Header.propTypes = {\\n  children: external_prop_types_default.a.node.isRequired,\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var table_header = (table_header_Header);\\n// CONCATENATED MODULE: ./src/components/table/table-body.jsx\\n\\n\\nvar table_body_Body = function Body(_ref) {\\n  var children = _ref.children;\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    role: \"rowgroup\"\\n  }, children);\\n};\\n\\n/* harmony default export */ var table_body = (table_body_Body);\\n// CONCATENATED MODULE: ./src/components/table/table-row.jsx\\n\\n\\n\\n\\nvar table_row_Row = function Row(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      has_hover = _ref.has_hover;\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    role: \"row\",\\n    className: external_classnames_default()(\\'dc-table__row\\', className, {\\n      \\'dc-table__row--hover\\': has_hover\\n    })\\n  }, children);\\n};\\n\\ntable_row_Row.propTypes = {\\n  children: external_prop_types_default.a.node.isRequired,\\n  className: external_prop_types_default.a.string,\\n  has_hover: external_prop_types_default.a.bool\\n};\\n/* harmony default export */ var table_row = (table_row_Row);\\n// CONCATENATED MODULE: ./src/components/table/table-cell.jsx\\n\\n\\n\\n\\nvar table_cell_Cell = function Cell(_ref) {\\n  var children = _ref.children,\\n      _ref$align = _ref.align,\\n      align = _ref$align === void 0 ? \\'left\\' : _ref$align,\\n      className = _ref.className,\\n      fixed = _ref.fixed;\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    role: \"cell\",\\n    className: external_classnames_default()(\\'dc-table__cell\\', className, {\\n      \\'dc-table__cell--right\\': align === \\'right\\',\\n      \\'dc-table__cell--fixed\\': fixed\\n    })\\n  }, children);\\n};\\n\\ntable_cell_Cell.propTypes = {\\n  align: external_prop_types_default.a.oneOf([\\'left\\', \\'right\\']),\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  fixed: external_prop_types_default.a.bool\\n};\\n/* harmony default export */ var table_cell = (table_cell_Cell);\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx + 1 modules\\nvar themed_scrollbars = __webpack_require__(14);\\n\\n// CONCATENATED MODULE: ./src/components/table/table.jsx\\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\n\\n\\n\\n\\n\\n\\n\\n // TODO: update the <Table /> component to fit with the DataTable in Trader\\n\\nvar table_Table = /*#__PURE__*/function (_React$Component) {\\n  _inherits(Table, _React$Component);\\n\\n  var _super = _createSuper(Table);\\n\\n  function Table() {\\n    _classCallCheck(this, Table);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  _createClass(Table, [{\\n    key: \"render\",\\n    value: function render() {\\n      return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n        role: \"table\",\\n        className: external_classnames_default()(\\'dc-table\\', this.props.className, {\\n          \\'dc-table--scroll\\': this.props.fixed\\n        })\\n      }, this.props.fixed ? /*#__PURE__*/external_react_[\"createElement\"](themed_scrollbars[\"a\" /* default */], {\\n        has_horizontal: true,\\n        width: this.props.scroll_width || \\'100%\\',\\n        height: this.props.scroll_height\\n      }, this.props.children) : this.props.children);\\n    }\\n  }]);\\n\\n  return Table;\\n}(external_react_[\"Component\"]);\\n\\ntable_Table.Head = table_head;\\ntable_Table.Header = table_header;\\ntable_Table.Body = table_body;\\ntable_Table.Row = table_row;\\ntable_Table.Cell = table_cell; // TODO add footer\\n\\n/* harmony default export */ var table = (table_Table);\\n// EXTERNAL MODULE: ./src/components/table/table.scss\\nvar table_table = __webpack_require__(96);\\n\\n// CONCATENATED MODULE: ./src/components/table/index.js\\n\\n\\n/* harmony default export */ var components_table = __webpack_exports__[\"default\"] = (table);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3RhYmxlL3RhYmxlLWhlYWQuanN4PzVhMjUiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3RhYmxlL3RhYmxlLWhlYWRlci5qc3g/MmI5ZCIsIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUtYm9keS5qc3g/YTZjZCIsIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUtcm93LmpzeD85MjI3Iiwid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy90YWJsZS90YWJsZS1jZWxsLmpzeD83NTE0Iiwid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy90YWJsZS90YWJsZS5qc3g/NWJmNyIsIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGFibGUvaW5kZXguanM/ZThjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCBIZWFkID0gKHsgY2hpbGRyZW4sIGFsaWduLCBjbGFzc05hbWUsIGZpeGVkIH0pID0+IChcbiAgICA8ZGl2XG4gICAgICAgIHJvbGU9J2NvbHVtbmhlYWRlcidcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy10YWJsZV9faGVhZCcsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgJ2RjLXRhYmxlX19jZWxsLS1yaWdodCc6IGFsaWduID09PSAncmlnaHQnLFxuICAgICAgICAgICAgJ2RjLXRhYmxlX19jZWxsLS1maXhlZCc6IGZpeGVkLFxuICAgICAgICB9KX1cbiAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbik7XG5cbkhlYWQucHJvcFR5cGVzID0ge1xuICAgIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZml4ZWQ6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IEhlYWRlciA9ICh7IGNoaWxkcmVuLCBjbGFzc05hbWUgfSkgPT4gKFxuICAgIDxkaXYgcm9sZT0ncm93Z3JvdXAnIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtdGFibGVfX2hlYWRlcicsIGNsYXNzTmFtZSl9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4pO1xuXG5IZWFkZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEJvZHkgPSAoeyBjaGlsZHJlbiB9KSA9PiA8ZGl2IHJvbGU9J3Jvd2dyb3VwJz57Y2hpbGRyZW59PC9kaXY+O1xuXG5leHBvcnQgZGVmYXVsdCBCb2R5O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgUm93ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgaGFzX2hvdmVyIH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICByb2xlPSdyb3cnXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLXRhYmxlX19yb3cnLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAnZGMtdGFibGVfX3Jvdy0taG92ZXInOiBoYXNfaG92ZXIsXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuUm93LnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFzX2hvdmVyOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvdztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IENlbGwgPSAoeyBjaGlsZHJlbiwgYWxpZ24gPSAnbGVmdCcsIGNsYXNzTmFtZSwgZml4ZWQgfSkgPT4gKFxuICAgIDxkaXZcbiAgICAgICAgcm9sZT0nY2VsbCdcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy10YWJsZV9fY2VsbCcsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgJ2RjLXRhYmxlX19jZWxsLS1yaWdodCc6IGFsaWduID09PSAncmlnaHQnLFxuICAgICAgICAgICAgJ2RjLXRhYmxlX19jZWxsLS1maXhlZCc6IGZpeGVkLFxuICAgICAgICB9KX1cbiAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbik7XG5cbkNlbGwucHJvcFR5cGVzID0ge1xuICAgIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZml4ZWQ6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2VsbDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBIZWFkIGZyb20gJy4vdGFibGUtaGVhZC5qc3gnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL3RhYmxlLWhlYWRlci5qc3gnO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi90YWJsZS1ib2R5LmpzeCc7XG5pbXBvcnQgUm93IGZyb20gJy4vdGFibGUtcm93LmpzeCc7XG5pbXBvcnQgQ2VsbCBmcm9tICcuL3RhYmxlLWNlbGwuanN4JztcbmltcG9ydCBUaGVtZWRTY3JvbGxiYXJzIGZyb20gJy4uL3RoZW1lZC1zY3JvbGxiYXJzL3RoZW1lZC1zY3JvbGxiYXJzLmpzeCc7XG5cbi8vIFRPRE86IHVwZGF0ZSB0aGUgPFRhYmxlIC8+IGNvbXBvbmVudCB0byBmaXQgd2l0aCB0aGUgRGF0YVRhYmxlIGluIFRyYWRlclxuY2xhc3MgVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICByb2xlPSd0YWJsZSdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLXRhYmxlJywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2RjLXRhYmxlLS1zY3JvbGwnOiB0aGlzLnByb3BzLmZpeGVkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmZpeGVkID8gKFxuICAgICAgICAgICAgICAgICAgICA8VGhlbWVkU2Nyb2xsYmFyc1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzX2hvcml6b250YWxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXt0aGlzLnByb3BzLnNjcm9sbF93aWR0aCB8fCAnMTAwJSd9XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuc2Nyb2xsX2hlaWdodH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgICAgIDwvVGhlbWVkU2Nyb2xsYmFycz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuVGFibGUuSGVhZCA9IEhlYWQ7XG5UYWJsZS5IZWFkZXIgPSBIZWFkZXI7XG5UYWJsZS5Cb2R5ID0gQm9keTtcblRhYmxlLlJvdyA9IFJvdztcblRhYmxlLkNlbGwgPSBDZWxsO1xuLy8gVE9ETyBhZGQgZm9vdGVyXG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlO1xuIiwiaW1wb3J0IFRhYmxlIGZyb20gJy4vdGFibGUuanN4JztcbmltcG9ydCAnLi90YWJsZS5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgVGFibGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUZBO0FBREE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7O0FDZkE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBREE7QUFGQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBRkE7QUFEQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUZBO0FBUUE7QUFDQTtBQUNBO0FBSEE7QUFZQTs7OztBQXRCQTtBQUNBO0FBd0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQzFDQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///110\\n')},14:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// CONCATENATED MODULE: ./src/hooks/use-hover.js\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\nvar use_hover_useHover = function useHover(refSetter) {\\n  var _React$useState = external_react_[\"useState\"](false),\\n      _React$useState2 = _slicedToArray(_React$useState, 2),\\n      value = _React$useState2[0],\\n      setValue = _React$useState2[1];\\n\\n  var ref = refSetter || external_react_[\"useRef\"](null);\\n\\n  var handleMouseOver = function handleMouseOver() {\\n    return setValue(true);\\n  };\\n\\n  var handleMouseOut = function handleMouseOut() {\\n    return setValue(false);\\n  };\\n\\n  external_react_[\"useEffect\"](function () {\\n    var node = ref.current;\\n\\n    if (node) {\\n      node.addEventListener(\\'mouseover\\', handleMouseOver);\\n      node.addEventListener(\\'mouseout\\', handleMouseOut);\\n      return function () {\\n        node.removeEventListener(\\'mouseover\\', handleMouseOver);\\n        node.removeEventListener(\\'mouseout\\', handleMouseOut);\\n      };\\n    }\\n\\n    return null;\\n  }, [ref.current]);\\n  return [ref, value];\\n};\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx\\nfunction themed_scrollbars_slicedToArray(arr, i) { return themed_scrollbars_arrayWithHoles(arr) || themed_scrollbars_iterableToArrayLimit(arr, i) || themed_scrollbars_unsupportedIterableToArray(arr, i) || themed_scrollbars_nonIterableRest(); }\\n\\nfunction themed_scrollbars_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction themed_scrollbars_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return themed_scrollbars_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return themed_scrollbars_arrayLikeToArray(o, minLen); }\\n\\nfunction themed_scrollbars_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction themed_scrollbars_iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction themed_scrollbars_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\nvar themed_scrollbars_ThemedScrollbars = function ThemedScrollbars(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      height = _ref.height,\\n      width = _ref.width,\\n      _ref$autohide = _ref.autohide,\\n      autohide = _ref$autohide === void 0 ? true : _ref$autohide,\\n      is_bypassed = _ref.is_bypassed,\\n      is_only_horizontal = _ref.is_only_horizontal,\\n      has_horizontal = _ref.has_horizontal,\\n      onScroll = _ref.onScroll,\\n      refSetter = _ref.refSetter;\\n  if (is_bypassed) return children;\\n\\n  var _useHover = use_hover_useHover(refSetter),\\n      _useHover2 = themed_scrollbars_slicedToArray(_useHover, 2),\\n      hoverRef = _useHover2[0],\\n      isHovered = _useHover2[1];\\n\\n  return /*#__PURE__*/external_react_[\"createElement\"](\"div\", {\\n    ref: hoverRef,\\n    className: external_classnames_default()(\\'dc-themed-scrollbars\\', className, {\\n      \\'dc-themed-scrollbars__autohide\\': autohide,\\n      \\'dc-themed-scrollbars__autohide--is-hovered\\': autohide && isHovered,\\n      \\'dc-themed-scrollbars--has-horizontal\\': has_horizontal,\\n      \\'dc-themed-scrollbars--only-horizontal\\': is_only_horizontal\\n    }),\\n    style: {\\n      maxHeight: height || \\'100%\\',\\n      maxWidth: width || \\'none\\'\\n    },\\n    onScroll: onScroll\\n  }, children);\\n};\\n\\n/* harmony default export */ var themed_scrollbars = __webpack_exports__[\"a\"] = (themed_scrollbars_ThemedScrollbars);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2hvb2tzL3VzZS1ob3Zlci5qcz8zYzg5Iiwid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy90aGVtZWQtc2Nyb2xsYmFycy90aGVtZWQtc2Nyb2xsYmFycy5qc3g/NDEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgdXNlSG92ZXIgPSByZWZTZXR0ZXIgPT4ge1xuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgcmVmID0gcmVmU2V0dGVyIHx8IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICAgIGNvbnN0IGhhbmRsZU1vdXNlT3ZlciA9ICgpID0+IHNldFZhbHVlKHRydWUpO1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlT3V0ID0gKCkgPT4gc2V0VmFsdWUoZmFsc2UpO1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHJlZi5jdXJyZW50O1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBoYW5kbGVNb3VzZU92ZXIpO1xuICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGhhbmRsZU1vdXNlT3V0KTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGhhbmRsZU1vdXNlT3Zlcik7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGhhbmRsZU1vdXNlT3V0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgW3JlZi5jdXJyZW50XSk7XG5cbiAgICByZXR1cm4gW3JlZiwgdmFsdWVdO1xufTtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUhvdmVyIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlLWhvdmVyJztcblxuY29uc3QgVGhlbWVkU2Nyb2xsYmFycyA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGhlaWdodCxcbiAgICB3aWR0aCxcbiAgICBhdXRvaGlkZSA9IHRydWUsXG4gICAgaXNfYnlwYXNzZWQsXG4gICAgaXNfb25seV9ob3Jpem9udGFsLFxuICAgIGhhc19ob3Jpem9udGFsLFxuICAgIG9uU2Nyb2xsLFxuICAgIHJlZlNldHRlcixcbn0pID0+IHtcbiAgICBpZiAoaXNfYnlwYXNzZWQpIHJldHVybiBjaGlsZHJlbjtcbiAgICBjb25zdCBbaG92ZXJSZWYsIGlzSG92ZXJlZF0gPSB1c2VIb3ZlcihyZWZTZXR0ZXIpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIHJlZj17aG92ZXJSZWZ9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLXRoZW1lZC1zY3JvbGxiYXJzJywgY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgJ2RjLXRoZW1lZC1zY3JvbGxiYXJzX19hdXRvaGlkZSc6IGF1dG9oaWRlLFxuICAgICAgICAgICAgICAgICdkYy10aGVtZWQtc2Nyb2xsYmFyc19fYXV0b2hpZGUtLWlzLWhvdmVyZWQnOiBhdXRvaGlkZSAmJiBpc0hvdmVyZWQsXG4gICAgICAgICAgICAgICAgJ2RjLXRoZW1lZC1zY3JvbGxiYXJzLS1oYXMtaG9yaXpvbnRhbCc6IGhhc19ob3Jpem9udGFsLFxuICAgICAgICAgICAgICAgICdkYy10aGVtZWQtc2Nyb2xsYmFycy0tb25seS1ob3Jpem9udGFsJzogaXNfb25seV9ob3Jpem9udGFsLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIG1heEhlaWdodDogaGVpZ2h0IHx8ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogd2lkdGggfHwgJ25vbmUnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uU2Nyb2xsPXtvblNjcm9sbH1cbiAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVkU2Nyb2xsYmFycztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFaQTtBQWlCQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///14\\n')},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},96:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUuc2Nzcz8xOTFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTQwNDg4NjQ4MjRcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///96\\n\")}}).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/table.js\n");

/***/ })

}]);